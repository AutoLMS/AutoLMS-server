{
  "info": {
    "name": "AutoLMS-R Complete API Collection",
    "description": "AutoLMS-R의 모든 API 엔드포인트를 포함한 완전한 테스트 컬렉션",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.2.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8000/api/v1",
      "type": "string",
      "description": "API 기본 URL"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string",
      "description": "인증 토큰"
    },
    {
      "key": "test_course_id",
      "value": "A2025114608241001",
      "type": "string",
      "description": "테스트용 강의 ID"
    },
    {
      "key": "test_task_id",
      "value": "",
      "type": "string",
      "description": "크롤링 작업 ID"
    }
  ],
  "item": [
    {
      "name": "1. System",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "시스템 상태 확인"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('service');",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "시스템 상태 확인 관련 API"
    },
    {
      "name": "2. Authentication",
      "item": [
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eclass_username\": \"20220001\",\n  \"eclass_password\": \"eclasspassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "새 사용자 등록 - 이클래스 계정으로만 가입"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eclass_username\": \"20220001\",\n  \"eclass_password\": \"eclasspassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "로그인하여 토큰 획득 - 이클래스 계정으로 로그인"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', responseJson.access_token);",
                  "    console.log('토큰 저장됨:', responseJson.access_token);",
                  "",
                  "    pm.test('Response has access_token', function () {",
                  "        pm.expect(responseJson).to.have.property('access_token');",
                  "        pm.expect(responseJson).to.have.property('token_type');",
                  "        pm.expect(responseJson.token_type).to.eql('bearer');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Verify Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/verify",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify"]
            },
            "description": "토큰 검증 및 사용자 정보 조회"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user info', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('eclass_username');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "로그아웃"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Logout successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "인증 관련 API - 회원가입, 로그인, 로그아웃"
    },
    {
      "name": "3. Courses",
      "item": [
        {
          "name": "Get All Courses",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/?skip=0&limit=100",
              "host": ["{{baseUrl}}"],
              "path": ["courses", ""],
              "query": [
                {
                  "key": "skip",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "100"
                }
              ]
            },
            "description": "모든 강의 목록 조회"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has courses list', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('courses');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData.courses).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Specific Course",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/{{test_course_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{test_course_id}}"]
            },
            "description": "특정 강의 정보 조회"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test('Course details retrieved', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData).to.have.property('name');",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('Course not found - expected for test data', function () {",
                  "        pm.response.to.have.status(404);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Refresh Courses",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "refresh"]
            },
            "description": "강의 목록 새로고침"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Refresh successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('courses');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Crawl All Courses (Legacy)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/crawl",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "crawl"]
            },
            "description": "모든 강의 자료 크롤링 (레거시 엔드포인트)"
          }
        }
      ],
      "description": "강의 관련 API - 목록 조회, 세부 정보, 새로고침"
    },
    {
      "name": "4. Notices",
      "item": [
        {
          "name": "Get Course Notices",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/{{test_course_id}}/notices/",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{test_course_id}}", "notices", ""]
            },
            "description": "강의 공지사항 목록 조회"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test('Notices retrieved successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('notices');",
                  "        pm.expect(jsonData).to.have.property('total');",
                  "        pm.expect(jsonData.notices).to.be.an('array');",
                  "    });",
                  "} else {",
                  "    pm.test('Expected response received', function () {",
                  "        pm.response.to.be.ok;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Specific Notice",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/{{test_course_id}}/notices/12345",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{test_course_id}}", "notices", "12345"]
            },
            "description": "특정 공지사항 조회"
          }
        },
        {
          "name": "Refresh Course Notices",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/{{test_course_id}}/notices/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{test_course_id}}", "notices", "refresh"]
            },
            "description": "공지사항 새로고침"
          }
        }
      ],
      "description": "공지사항 관련 API"
    },
    {
      "name": "5. Materials",
      "item": [
        {
          "name": "Get Course Materials",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/{{test_course_id}}/materials/",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{test_course_id}}", "materials", ""]
            },
            "description": "강의자료 목록 조회"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test('Materials retrieved successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('materials');",
                  "        pm.expect(jsonData).to.have.property('total');",
                  "        pm.expect(jsonData.materials).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Specific Material",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/{{test_course_id}}/materials/12345",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{test_course_id}}", "materials", "12345"]
            },
            "description": "특정 강의자료 조회"
          }
        },
        {
          "name": "Refresh Course Materials",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/{{test_course_id}}/materials/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{test_course_id}}", "materials", "refresh"]
            },
            "description": "강의자료 새로고침"
          }
        }
      ],
      "description": "강의자료 관련 API"
    },
    {
      "name": "6. Assignments",
      "item": [
        {
          "name": "Get Course Assignments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/{{test_course_id}}/assignments/",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{test_course_id}}", "assignments", ""]
            },
            "description": "과제 목록 조회"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test('Assignments retrieved successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('assignments');",
                  "        pm.expect(jsonData).to.have.property('total');",
                  "        pm.expect(jsonData.assignments).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Specific Assignment",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/{{test_course_id}}/assignments/12345",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{test_course_id}}", "assignments", "12345"]
            },
            "description": "특정 과제 조회"
          }
        },
        {
          "name": "Refresh Course Assignments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/{{test_course_id}}/assignments/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{test_course_id}}", "assignments", "refresh"]
            },
            "description": "과제 새로고침"
          }
        }
      ],
      "description": "과제 관련 API"
    },
    {
      "name": "7. Crawling",
      "item": [
        {
          "name": "Crawl All Courses",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/crawl/all?auto_download=true",
              "host": ["{{baseUrl}}"],
              "path": ["crawl", "all"],
              "query": [
                {
                  "key": "auto_download",
                  "value": "true"
                }
              ]
            },
            "description": "모든 강의 크롤링 시작"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.task_id) {",
                  "        pm.collectionVariables.set('test_task_id', responseJson.task_id);",
                  "        console.log('Task ID 저장됨:', responseJson.task_id);",
                  "    }",
                  "",
                  "    pm.test('Crawl task started', function () {",
                  "        pm.expect(responseJson).to.have.property('status');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Sync All Courses",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/crawl/sync/all?auto_download=true",
              "host": ["{{baseUrl}}"],
              "path": ["crawl", "sync", "all"],
              "query": [
                {
                  "key": "auto_download",
                  "value": "true"
                }
              ]
            },
            "description": "전체 강의 동기화"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.task_id) {",
                  "        pm.collectionVariables.set('test_task_id', responseJson.task_id);",
                  "        console.log('Task ID 저장됨:', responseJson.task_id);",
                  "    }",
                  "",
                  "    pm.test('Sync task started', function () {",
                  "        pm.expect(responseJson).to.have.property('status');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Sync Specific Course",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/crawl/sync/course/{{test_course_id}}?auto_download=true",
              "host": ["{{baseUrl}}"],
              "path": ["crawl", "sync", "course", "{{test_course_id}}"],
              "query": [
                {
                  "key": "auto_download",
                  "value": "true"
                }
              ]
            },
            "description": "특정 강의 동기화"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.task_id) {",
                  "        pm.collectionVariables.set('test_task_id', responseJson.task_id);",
                  "        console.log('Task ID 저장됨:', responseJson.task_id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Crawl Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/crawl/status/{{test_task_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["crawl", "status", "{{test_task_id}}"]
            },
            "description": "크롤링 상태 확인"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test('Status retrieved successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('status');",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('Task not found - expected for invalid task_id', function () {",
                  "        pm.response.to.have.status(404);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Cancel Crawl Task",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/crawl/cancel/{{test_task_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["crawl", "cancel", "{{test_task_id}}"]
            },
            "description": "크롤링 작업 취소"
          }
        }
      ],
      "description": "크롤링 관련 API - 전체/개별 크롤링, 상태 확인, 취소"
    },
    {
      "name": "8. Attachments",
      "item": [
        {
          "name": "Get Attachment Metadata",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/attachments/12345",
              "host": ["{{baseUrl}}"],
              "path": ["attachments", "12345"]
            },
            "description": "첨부파일 메타데이터 조회"
          }
        },
        {
          "name": "Download Attachment",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/attachments/12345/download",
              "host": ["{{baseUrl}}"],
              "path": ["attachments", "12345", "download"]
            },
            "description": "첨부파일 다운로드"
          }
        },
        {
          "name": "Get Attachments by Source",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/attachments/notices/12345",
              "host": ["{{baseUrl}}"],
              "path": ["attachments", "notices", "12345"]
            },
            "description": "소스별 첨부파일 목록 조회"
          }
        },
        {
          "name": "Search Attachments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/attachments/search/?query=pdf",
              "host": ["{{baseUrl}}"],
              "path": ["attachments", "search", ""],
              "query": [
                {
                  "key": "query",
                  "value": "pdf"
                }
              ]
            },
            "description": "첨부파일 검색"
          }
        }
      ],
      "description": "첨부파일 관련 API - 메타데이터, 다운로드, 검색"
    },
    {
      "name": "9. Syllabus",
      "item": [
        {
          "name": "Get Course Syllabus",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/{{test_course_id}}/syllabus/",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{test_course_id}}", "syllabus", ""]
            },
            "description": "강의계획서 조회"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test('Syllabus retrieved successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('course_id');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Refresh Course Syllabus",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/courses/{{test_course_id}}/syllabus/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{test_course_id}}", "syllabus", "refresh"]
            },
            "description": "강의계획서 새로고침"
          }
        }
      ],
      "description": "강의계획서 관련 API"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 글로벌 Pre-request Script",
          "console.log('요청 시작:', pm.info.requestName);",
          "console.log('인증 토큰:', pm.collectionVariables.get('auth_token') ? '있음' : '없음');"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 글로벌 Test Script",
          "pm.test('Response time is less than 10000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(10000);",
          "});",
          "",
          "if (pm.response.code >= 400) {",
          "    console.log('Error Response:', pm.response.text());",
          "}"
        ]
      }
    }
  ]
}